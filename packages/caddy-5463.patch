From 35d0d74d53cbf37bc01434c7e8a7bf231a27b9a7 Mon Sep 17 00:00:00 2001
From: Francis Lavoie <lavofr@gmail.com>
Date: Mon, 27 Mar 2023 05:28:03 -0400
Subject: [PATCH 1/3] replacer: Implement `file.*` global replacements

---
 replacer.go | 22 ++++++++++++++++++++++
 1 file changed, 22 insertions(+)

diff --git a/replacer.go b/replacer.go
index 7f97f347..ce35609e 100644
--- a/replacer.go
+++ b/replacer.go
@@ -22,6 +22,8 @@ import (
 	"strconv"
 	"strings"
 	"time"
+
+	"go.uber.org/zap"
 )
 
 // NewReplacer returns a new Replacer.
@@ -299,6 +301,26 @@ func globalDefaultReplacements(key string) (any, bool) {
 		return os.Getenv(key[len(envPrefix):]), true
 	}
 
+	// check files
+	// TODO: We may want to cache the file contents in case
+	// this is used in a hot path in a config. But for now,
+	// we'll just read the file every time, the kernel will
+	// tend to cache the file contents for us.
+	const filePrefix = "file."
+	if strings.HasPrefix(key, filePrefix) {
+		filename := key[len(filePrefix):]
+		body, err := os.ReadFile(filename)
+		if err != nil {
+			wd, _ := os.Getwd()
+			Log().Error("placeholder: failed to read file",
+				zap.String("file", filename),
+				zap.String("wd", wd),
+				zap.Error(err))
+			return nil, true
+		}
+		return body, true
+	}
+
 	switch key {
 	case "system.hostname":
 		// OK if there is an error; just return empty string

From 148ef148a4fe126885f0809acaacdc4610a26ce1 Mon Sep 17 00:00:00 2001
From: Francis Lavoie <lavofr@gmail.com>
Date: Mon, 27 Mar 2023 15:33:06 -0400
Subject: [PATCH 2/3] Update replacer.go

Co-authored-by: Matt Holt <mholt@users.noreply.github.com>
---
 replacer.go | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/replacer.go b/replacer.go
index ce35609e..4dbcf8b0 100644
--- a/replacer.go
+++ b/replacer.go
@@ -314,7 +314,7 @@ func globalDefaultReplacements(key string) (any, bool) {
 			wd, _ := os.Getwd()
 			Log().Error("placeholder: failed to read file",
 				zap.String("file", filename),
-				zap.String("wd", wd),
+				zap.String("working_dir", wd),
 				zap.Error(err))
 			return nil, true
 		}

From 66e02ecb4273735117d2b694ff6af92741f663cd Mon Sep 17 00:00:00 2001
From: Francis Lavoie <lavofr@gmail.com>
Date: Mon, 27 Mar 2023 18:02:07 -0400
Subject: [PATCH 3/3] Read into a buffer of 1MB to limit reading huge files

---
 replacer.go | 26 +++++++++++++++++++++-----
 1 file changed, 21 insertions(+), 5 deletions(-)

diff --git a/replacer.go b/replacer.go
index 4dbcf8b0..87fc96d1 100644
--- a/replacer.go
+++ b/replacer.go
@@ -16,6 +16,7 @@ package caddy
 
 import (
 	"fmt"
+	"io"
 	"os"
 	"path/filepath"
 	"runtime"
@@ -302,14 +303,11 @@ func globalDefaultReplacements(key string) (any, bool) {
 	}
 
 	// check files
-	// TODO: We may want to cache the file contents in case
-	// this is used in a hot path in a config. But for now,
-	// we'll just read the file every time, the kernel will
-	// tend to cache the file contents for us.
 	const filePrefix = "file."
 	if strings.HasPrefix(key, filePrefix) {
 		filename := key[len(filePrefix):]
-		body, err := os.ReadFile(filename)
+		maxSize := 1024 * 1024
+		body, err := readFileIntoBuffer(filename, maxSize)
 		if err != nil {
 			wd, _ := os.Getwd()
 			Log().Error("placeholder: failed to read file",
@@ -351,6 +349,24 @@ func globalDefaultReplacements(key string) (any, bool) {
 	return nil, false
 }
 
+// readFileIntoBuffer reads the file at filePath into a size limited buffer.
+func readFileIntoBuffer(filename string, size int) ([]byte, error) {
+	file, err := os.Open(filename)
+	if err != nil {
+		return nil, err
+	}
+	defer file.Close()
+
+	buffer := make([]byte, size)
+	n, err := file.Read(buffer)
+	if err != nil && err != io.EOF {
+		return nil, err
+	}
+
+	// slice the buffer to the actual size
+	return buffer[:n], nil
+}
+
 // ReplacementFunc is a function that is called when a
 // replacement is being performed. It receives the
 // variable (i.e. placeholder name) and the value that
